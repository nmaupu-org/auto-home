---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Release.Name }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-pv
spec:
  capacity:
    storage: {{ .Values.deluge.nfs.storageSize }}
{{- if .Values.deluge.nfs.accessModes }}
  accessModes:
{{ .Values.deluge.nfs.accessModes | toYaml | indent 4 }}
{{- end }}
  nfs:
    server: {{ .Values.nfs_server }}
    path: {{ .Values.deluge.nfs.mountpoint | quote }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-pvc
  namespace: {{ .Release.Name }}
spec:
{{- if .Values.deluge.nfs.accessModes }}
  accessModes:
{{ .Values.deluge.nfs.accessModes | toYaml | indent 4 }}
{{- end }}
  storageClassName: ""
  resources:
    requests:
      storage: {{ .Values.deluge.nfs.storageSize }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-iscsi-pv
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  iscsi:
    targetPortal: "192.168.12.8:3260"
    iqn: "iqn.2011-03.home.fossar.net.istgt:kube-target"
    lun: 0
    fsType: "ext4"
    readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-iscsi-pvc
  namespace: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deploy
  namespace: {{ .Release.Name }}
  labels:
    k8s-app: {{ .Release.Name }}-deploy
spec:
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}-deploy
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name }}-deploy
    spec:
      containers:
      - name: deluge
        image: {{ .Values.deluge.image }}
        imagePullPolicy: IfNotPresent
        ports:
          - name: deluge
            containerPort: 8112
#        livenessProbe:
#          tcpSocket:
#            port: {{ .Values.deluge.daemon_port }}
#          initialDelaySeconds: 10
#          periodSeconds: 10
#        readinessProbe:
#          tcpSocket:
#            port: {{ .Values.deluge.daemon_port }}
#          initialDelaySeconds: 20
#          periodSeconds: 20
        resources:
           limits:
             cpu: {{ .Values.deluge.resources.limits.cpu }}
             memory: {{ .Values.deluge.resources.limits.memory }}
           requests:
             cpu: {{ .Values.deluge.resources.requests.cpu }}
             memory: {{ .Values.deluge.resources.requests.memory }}
        volumeMounts:
          - name: iscsi-volume
            mountPath: {{ .Values.deluge.storageDir | quote }}
          - name: iscsi-volume
            mountPath: "/config"
            subPath: {{ .Values.deluge.nfs.configSubPath }}
      volumes:
        - name: iscsi-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-iscsi-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-svc
  namespace: {{ .Release.Name }}
  labels:
    k8s-app: {{ .Release.Name }}-svc
    kubernetes.io/name: "{{ .Release.Name }}-svc"
spec:
  selector:
    k8s-app: {{ .Release.Name }}-deploy
  ports:
  - name: deluge
    port: 8112
    protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-daemon-svc
  namespace: {{ .Release.Name }}
  labels:
    k8s-app: {{ .Release.Name }}-daemon-svc
    kubernetes.io/name: "{{ .Release.Name }}-daemon-svc"
spec:
  selector:
    k8s-app: {{ .Release.Name }}-deploy
  ports:
  - name: deluge-daemon
    port: 58846
    protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-ingress
  namespace: {{ .Release.Name }}
spec:
  rules:
  - host: {{ .Values.deluge.ingress_hostname }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ .Release.Name }}-svc
          servicePort: 8112
{{- /*
{{- $root := . -}}
{{- range $k, $v := (untilStep (.Values.deluge.port_beg | int) (.Values.deluge.port_end | int) 1) }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $root.Release.Name }}-svc-{{$v}}
  namespace: {{ $root.Release.Name }}
  labels:
    k8s-app: {{ $root.Release.Name }}-svc-{{$v}}
    kubernetes.io/name: "{{ $root.Release.Name }}-svc-{{$v}}"
spec:
  selector:
    k8s-app: {{ $root.Release.Name }}-deploy
  type: NodePort
  ports:
    - name: torrent-{{$v}}
      port: {{$v}}
      targetPort: {{$v}}
      protocol: TCP
{{- end }}
*/ -}}

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    server: nfs.home.fossar.net
    path: "/mnt/tank/kube-nfs/minio"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: global
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: global
type: Opaque
data:
  access_key: UDJVMDcyWVQ5UDZVSjFLTEdZTEQ=
  secret_key: Y3pKMWlEeEtZY1FEcWl3OXpTMlhCRmtPN3cwU3d4MUhCcmtPS0tIdw==
    
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: minio
  namespace: global
  labels:
    k8s-app: minio
spec:
  selector:
    matchLabels:
      k8s-app: minio
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: minio
    spec:
      containers:
      - name: minio
        image: minio/minio
        imagePullPolicy: Always
        args:
          - server
          - /data
        ports:
          - name: minio
            containerPort: 9000
        resources:
          limits:
            cpu: 50m
            memory: 50Mi
          requests:
            cpu: 20m
            memory: 20Mi
        env:
          - name: MINIO_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: minio-secret
                key: access_key
          - name: MINIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: minio-secret
                key: secret_key
        volumeMounts:
          - name: nfs-volume
            mountPath: /data
      volumes:
        - name: nfs-volume
          persistentVolumeClaim:
            claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: global
  labels:
    k8s-app: minio
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "minio"
spec:
  selector:
    k8s-app: minio
  ports:
  - name: minio-svc
    port: 9000
    protocol: TCP

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: minio-ingress
  namespace: global
spec:
  rules:
  - host: minio.home.fossar.net
    http:
      paths:
      - path: /
        backend:
          serviceName: minio
          servicePort: 9000

---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Release.Name }}

# datadir
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-datadir-pv
spec:
  capacity:
    storage: {{ .Values.couchpotato.datadir.storageSize }}
  accessModes:
    - ReadWriteOnce
  nfs:
    server: {{ .Values.nfs_server }}
    path: {{ .Values.couchpotato.datadir.mountpoint }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-datadir-pvc
  namespace: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: {{ .Values.couchpotato.datadir.storageSize }}

# downloadsdir
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-downloadsdir-pv
spec:
  capacity:
    storage: {{ .Values.couchpotato.downloadsdir.storageSize }}
  accessModes:
    - ReadOnlyMany
  nfs:
    server: {{ .Values.nfs_server }}
    path: {{ .Values.couchpotato.downloadsdir.mountpoint }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-downloadsdir-pvc
  namespace: {{ .Release.Name }}
spec:
  accessModes:
    - ReadOnlyMany
  storageClassName: ""
  resources:
    requests:
      storage: {{ .Values.couchpotato.downloadsdir.storageSize }}

# moviesdir
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-moviesdir-pv
spec:
  capacity:
    storage: {{ .Values.couchpotato.moviesdir.storageSize }}
  accessModes:
    - ReadWriteOnce
  nfs:
    server: {{ .Values.nfs_server }}
    path: {{ .Values.couchpotato.moviesdir.mountpoint }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-moviesdir-pvc
  namespace: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: {{ .Values.couchpotato.moviesdir.storageSize }}


# Deployment
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: couchpotato-deploy
  namespace: {{ .Release.Name }}
  labels:
    k8s-app: couchpotato-deploy
spec:
  selector:
    matchLabels:
      k8s-app: couchpotato-deploy
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: couchpotato-deploy
      annotations:
        # Force redeployment if configmap changes (when using helm upgrade command)
        # annotation name can be anything you want, it is just a way to call .Files.get
        helm/force-redeploy: {{ .Files.Get "couchpotato-cm.yaml" | sha256sum }}
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "initialize",
                "image": "busybox",
                "imagePullPolicy": "IfNotPresent",
                "command": ["sh", "-c", "cp /root/config.ini /config/config.ini ; chown 911:911 /config/config.ini"],
                "volumeMounts": [
                    {
                      "name": "config-volume",
                      "mountPath": "/config"
                    },
                    {
                      "name": "config-init-volume",
                      "mountPath": "/root"
                    }
                ]
            }
        ]'
    spec:
      containers:
      - name: couchpotato
        image: {{ .Values.couchpotato.image }}
        imagePullPolicy: IfNotPresent
        ports:
          - name: couch-port
            containerPort: {{ .Values.couchpotato.port }}
        readinessProbe:
          tcpSocket:
            port: couch-port
          initialDelaySeconds: 90
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: couch-port
          initialDelaySeconds: 100
          periodSeconds: 20
        resources:
           limits:
             cpu: {{ .Values.couchpotato.resources.limits.cpu }}
             memory: {{ .Values.couchpotato.resources.limits.memory }}
           requests:
             cpu: {{ .Values.couchpotato.resources.requests.cpu }}
             memory: {{ .Values.couchpotato.resources.requests.memory }}
        volumeMounts:
          - name: dls-volume
            mountPath: "/downloads"
          - name: movies-volume
            mountPath: "/movies"
          - name: config-volume
            mountPath: /config
          - name: datadir-volume
            mountPath: /config/data
      volumes:
        - name: dls-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-downloadsdir-pvc
        - name: movies-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-moviesdir-pvc
        - name: config-volume
          emptyDir: {}
        - name: config-init-volume
          configMap:
            name: couchpotato-configmap
        - name: datadir-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-datadir-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-svc
  namespace: {{ .Release.Name }}
  labels:
    k8s-app: {{ .Release.Name }}-svc
    kubernetes.io/name: "{{ .Release.Name }}-svc"
spec:
  selector:
    k8s-app: couchpotato-deploy
  ports:
  - name: couch-port
    port: {{ .Values.couchpotato.port }}
    protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-ingress
  namespace: {{ .Release.Name }}
spec:
  rules:
  - host: {{ .Values.couchpotato.ingress_hostname }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ .Release.Name }}-svc
          servicePort: {{ .Values.couchpotato.port }}
